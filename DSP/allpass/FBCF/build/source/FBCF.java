/* autogenerated by Processing revision 1283 on 2023-01-06 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class FBCF extends PApplet {

FBCombFilter hey = new FBCombFilter(50, 0.8f);
int n = 0; int x = 0; float y;

 public void draw(){
  y = 0;
  if(n == 0){
    println("FBCF RESPONSE");
    x = 1;
  } else {
    x = 0;
  }

  y = hey.calculate(x);
  //print results
  println( "n:", n++, "x:", x, "y: ", y);
  //stop response
  if(n == 51){
    stop();
  }

}
class FBCombFilter{
  float y; float coeff;
  cBuffer circBufferW;
  FBCombFilter(int nSamps, float newCoeff){
    circBufferW = new cBuffer(nSamps+1,nSamps);
    coeff = newCoeff;
  }

   public float calculate(float x){
    y = x + coeff * circBufferW.read();
    circBufferW.write(y);
    return y;
  }
};
class cBuffer{
float[] buffer; int writeH; int readH; int size;

  cBuffer(int thissize, int numSamplesDelay){
    readH = thissize - numSamplesDelay;
    writeH = 0;
    buffer = new float[thissize];
    size = thissize;
    for(int i = 0; i < size; i++){
      buffer[i] = 0.0f;
    }
  }

   public void write(float value){
    buffer[writeH++] = value;

    writeH = wrap(writeH);
  }

   public float read(){
    float value = buffer[readH++];
    readH = wrap(readH);
    return value;
  }

   public int wrap(int head){
    if(head >= size){
      head -= size;

    }
    return head;
  }

};


  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "FBCF" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
