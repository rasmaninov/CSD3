/* autogenerated by Processing revision 1283 on 2023-01-17 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Schroeder extends PApplet {


Waveform waveform1;
Waveform waveform2;
int sampleLength = 4;
int samples = 44100;
allpass a = new allpass(347, 0.7f);
allpass b = new allpass(113,0.7f);
allpass c = new allpass(37,0.7f);
FBCombFilter d = new FBCombFilter(1687, 0.773f);
FBCombFilter e = new FBCombFilter(1601, 0.802f);
FBCombFilter f = new FBCombFilter(2053, 0.753f);
FBCombFilter g = new FBCombFilter(2251, 0.733f);
float sum;

float y = 0; float x = 0;
AudioSample sample;
AudioSample sampleProcessed;

 public void setup(){

  /* size commented out by preprocessor */;
  strokeWeight(2);
  noFill();

  float[] sinewave = new float[samples * sampleLength];
  float[] sineProcessed = new float[samples * sampleLength];


  for (int i = 0; i < samples * sampleLength; i++) {
    y = 0; sum = 0;
    if(i <= samples/2){
      x = (sin(TWO_PI*i/samples*200)+sin(TWO_PI*i/samples*300)+sin(TWO_PI*i/samples*400))*0.3f;

    } else {
      x = 0;
    }
    sinewave[i] = x;

    x = (d.calculate(x) + e.calculate(x) + f.calculate(x) + g.calculate(x))*0.25f;
    x = c.calculate(b.calculate(a.calculate(x)));
    sineProcessed[i] = x;
  }


  //play created samples in a loop with a frequency of 1hz
  sample = new AudioSample(this, sinewave, samples);
  sample.loop();
  waveform1 = new Waveform(this, samples);
  waveform1.input(sample);

  sampleProcessed = new AudioSample(this, sineProcessed, samples);
  // sampleProcessed.loop();
  sampleProcessed.amp(1);
  waveform2 = new Waveform(this, samples);
  waveform2.input(sampleProcessed);

}

 public void draw(){
  background(0);

  waveform1.analyze();


  stroke(255);

  beginShape();
  for(int i = 0; i < samples; i++)
  {
    vertex(
      map(i, 0, samples, 0, width),
      map(waveform1.data[i], -1, 1, 0, height)
    );
  }
  endShape();

  waveform2.analyze();
  stroke(255,0,0);
  beginShape();
  for(int i = 0; i < samples; i++)
  {
    vertex(
      map(i, 0, samples, 0, width),
      map(waveform2.data[i], -5, 5, 0 , height)
    );
  }
  endShape();


}
class allpass {
cBuffer circBufferW; float y = 0; float w = 0; float wDelay;
float coeff;
  allpass(int nSamps, float newCoeff){
    circBufferW = new cBuffer(nSamps+1,nSamps);
    coeff = newCoeff;
  }

   public float calculate(float x){
    y = 0;
    wDelay = circBufferW.read();

    w = coeff * wDelay + x;
    y += coeff * w - wDelay;

    circBufferW.write(w);
    return y;
  }
};
class FBCombFilter{
  float y; float coeff;
  cBuffer circBufferW;
  FBCombFilter(int nSamps, float newCoeff){
    circBufferW = new cBuffer(nSamps+1,nSamps);
    coeff = newCoeff;
  }

   public float calculate(float x){
    y = x + coeff * circBufferW.read();
    circBufferW.write(y);
    return y;
  }
};
class cBuffer{
float[] buffer; int writeH; int readH; int size;

  cBuffer(int thissize, int numSamplesDelay){
    readH = thissize - numSamplesDelay;
    writeH = 0;
    buffer = new float[thissize];
    size = thissize;
    for(int i = 0; i < size; i++){
      buffer[i] = 0.0f;
    }
  }

   public void write(float value){
    buffer[writeH++] = value;

    writeH = wrap(writeH);
  }

   public float read(){
    float value = buffer[readH++];
    readH = wrap(readH);
    return value;
  }

   public int wrap(int head){
    if(head >= size){
      head -= size;

    }
    return head;
  }

};


  public void settings() { size(400, 400); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Schroeder" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
